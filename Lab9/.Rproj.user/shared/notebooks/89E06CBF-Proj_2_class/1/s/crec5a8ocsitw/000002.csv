"0","#let's fit some modelslogistic reg on this classification #pb. For now let's use a treshold of 0.5, but I later came #up with an ingenious way to find the optimal treshold for #our business problem."
"0","threshold = 0.5"
"0","glm_mod = glm(good ~. , data = train, family = binomial)"
"0","glm_prob = predict(glm_mod, data.frame(test.x), type=""response"")"
"0","glm_class = as.factor(ifelse(glm_prob >= threshold, 1, 0))"
"0","cm = confusionMatrix(glm_class, test.y, positive = ""1"")"
"0","glm_eval = cm; glm_eval"
"1","Confusion Matrix and Statistics

"
"1","          Reference
"
"1","Prediction"
"1","   0"
"1","   1"
"1","
         0"
"1","  46"
"1","  30"
"1","
         1"
"1","  62"
"1"," 223"
"1","
"
"1",""
"1","                         "
"1","                 "
"1","
"
"1","               Accuracy :"
"1"," 0.7452          "
"1","
"
"1","                 95% CI :"
"1"," (0.6969, 0.7893)"
"1","
"
"1","    No Information Rate :"
"1"," 0.7008          "
"1","
"
"1","    P-Value [Acc > NIR] :"
"1"," 0.035923        "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","                  Kappa :"
"1"," 0.3359          "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1"," Mcnemar's Test P-Value :"
"1"," 0.001229        "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","            Sensitivity :"
"1"," 0.8814          "
"1","
"
"1","            Specificity :"
"1"," 0.4259          "
"1","
"
"1","         Pos Pred Value :"
"1"," 0.7825          "
"1","
"
"1","         Neg Pred Value :"
"1"," 0.6053          "
"1","
"
"1","             Prevalence :"
"1"," 0.7008          "
"1","
"
"1","         Detection Rate :"
"1"," 0.6177          "
"1","
"
"1","   Detection Prevalence :"
"1"," 0.7895          "
"1","
"
"1","      Balanced Accuracy :"
"1"," 0.6537          "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","       'Positive' Class :"
"1"," 1               "
"1","
"
"1","                         "
"1","                 "
"1","
"
"0","#Now Lasso with 10-fold CV"
"0","cvlasso = cv.glmnet(train.x, train.y, "
"0","                       family = ""binomial"","
"0","                       type.measure = ""auc"")"
"0","coef(cvlasso, s=cvlasso$lambda.1se) "
"1","12 x 1 sparse Matrix of class ""dgCMatrix""
"
"1","                    "
"1","          s1"
"1","
(Intercept)         "
"1","  1.02612756"
"1","
fixed.acidity       "
"1","  .         "
"1","
volatile.acidity    "
"1"," -0.45264129"
"1","
citric.acid         "
"1","  .         "
"1","
residual.sugar      "
"1","  0.11252950"
"1","
chlorides           "
"1"," -0.07329295"
"1","
free.sulfur.dioxide "
"1","  0.13785156"
"1","
total.sulfur.dioxide"
"1","  .         "
"1","
density             "
"1","  .         "
"1","
pH                  "
"1","  .         "
"1","
sulphates           "
"1","  0.03302787"
"1","
alcohol             "
"1","  0.97358121"
"1","
"
"0","cvlasso_prob = predict(cvlasso, "
"0","                          test.x, "
"0","                          type=""response"", "
"0","                          s=cvlasso$lambda.1se)"
"0",""
"0","lasso_class = as.factor(ifelse(cvlasso_prob >= threshold, 1, 0))"
"0","cm_lasso = confusionMatrix(lasso_class, test.y, positive = ""1"")"
"0","cvlasso_eval = cm; cvlasso_eval"
"1","Confusion Matrix and Statistics

"
"1","          Reference
"
"1","Prediction"
"1","   0"
"1","   1"
"1","
         0"
"1","  46"
"1","  30"
"1","
         1"
"1","  62"
"1"," 223"
"1","
"
"1",""
"1","                         "
"1","                 "
"1","
"
"1","               Accuracy :"
"1"," 0.7452          "
"1","
"
"1","                 95% CI :"
"1"," (0.6969, 0.7893)"
"1","
"
"1","    No Information Rate :"
"1"," 0.7008          "
"1","
"
"1","    P-Value [Acc > NIR] :"
"1"," 0.035923        "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","                  Kappa :"
"1"," 0.3359          "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1"," Mcnemar's Test P-Value :"
"1"," 0.001229        "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","            Sensitivity :"
"1"," 0.8814          "
"1","
"
"1","            Specificity :"
"1"," 0.4259          "
"1","
"
"1","         Pos Pred Value :"
"1"," 0.7825          "
"1","
"
"1","         Neg Pred Value :"
"1"," 0.6053          "
"1","
"
"1","             Prevalence :"
"1"," 0.7008          "
"1","
"
"1","         Detection Rate :"
"1"," 0.6177          "
"1","
"
"1","   Detection Prevalence :"
"1"," 0.7895          "
"1","
"
"1","      Balanced Accuracy :"
"1"," 0.6537          "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","       'Positive' Class :"
"1"," 1               "
"1","
"
"1","                         "
"1","                 "
"1","
"
"0","#Decision tree but this time classification problem with boosting"
"0","dt = C5.0(train.x, train.y, trials = 10)"
"0","dt_pred = predict(dt, test.x)"
"0","confMat = confusionMatrix(dt_pred, test.y, positive=""1"")"
"0","dtboost_eval = list(confusionMatrix = confMat); dtboost_eval"
"1","$confusionMatrix
"
"1","Confusion Matrix and Statistics

"
"1","          Reference
"
"1","Prediction"
"1","   0"
"1","   1"
"1","
         0"
"1","  68"
"1","  26"
"1","
         1"
"1","  40"
"1"," 227"
"1","
"
"1",""
"1","                         "
"1","                 "
"1","
"
"1","               Accuracy :"
"1"," 0.8172          "
"1","
"
"1","                 95% CI :"
"1"," (0.7734, 0.8557)"
"1","
"
"1","    No Information Rate :"
"1"," 0.7008          "
"1","
"
"1","    P-Value [Acc > NIR] :"
"1"," 3.06e-07        "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","                  Kappa :"
"1"," 0.5472          "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1"," Mcnemar's Test P-Value :"
"1"," 0.1096          "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","            Sensitivity :"
"1"," 0.8972          "
"1","
"
"1","            Specificity :"
"1"," 0.6296          "
"1","
"
"1","         Pos Pred Value :"
"1"," 0.8502          "
"1","
"
"1","         Neg Pred Value :"
"1"," 0.7234          "
"1","
"
"1","             Prevalence :"
"1"," 0.7008          "
"1","
"
"1","         Detection Rate :"
"1"," 0.6288          "
"1","
"
"1","   Detection Prevalence :"
"1"," 0.7396          "
"1","
"
"1","      Balanced Accuracy :"
"1"," 0.7634          "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","       'Positive' Class :"
"1"," 1               "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","
"
"0","#Now, let's fit a RF in 2 ways: a VANILLA one and one with CV"
"0","rfcat = randomForest(good~., data=train, ntree=1000, mtry=sqrt(p))"
"0","rfcat_prob = predict(rfcat, test.x)"
"0","confMat = confusionMatrix(rfcat_prob, test.y, positive=""1"")"
"0","rfcat_eval = list(confusionMatrix = confMat)"
"0","rfcat_eval"
"1","$confusionMatrix
"
"1","Confusion Matrix and Statistics

"
"1","          Reference
"
"1","Prediction"
"1","   0"
"1","   1"
"1","
         0"
"1","  76"
"1","  19"
"1","
         1"
"1","  32"
"1"," 234"
"1","
"
"1",""
"1","                         "
"1","                "
"1","
"
"1","               Accuracy :"
"1"," 0.8587         "
"1","
"
"1","                 95% CI :"
"1"," (0.8185, 0.893)"
"1","
"
"1","    No Information Rate :"
"1"," 0.7008         "
"1","
"
"1","    P-Value [Acc > NIR] :"
"1"," 1.779e-12      "
"1","
"
"1","                         "
"1","                "
"1","
"
"1","                  Kappa :"
"1"," 0.6511         "
"1","
"
"1","                         "
"1","                "
"1","
"
"1"," Mcnemar's Test P-Value :"
"1"," 0.09289        "
"1","
"
"1","                         "
"1","                "
"1","
"
"1","            Sensitivity :"
"1"," 0.9249         "
"1","
"
"1","            Specificity :"
"1"," 0.7037         "
"1","
"
"1","         Pos Pred Value :"
"1"," 0.8797         "
"1","
"
"1","         Neg Pred Value :"
"1"," 0.8000         "
"1","
"
"1","             Prevalence :"
"1"," 0.7008         "
"1","
"
"1","         Detection Rate :"
"1"," 0.6482         "
"1","
"
"1","   Detection Prevalence :"
"1"," 0.7368         "
"1","
"
"1","      Balanced Accuracy :"
"1"," 0.8143         "
"1","
"
"1","                         "
"1","                "
"1","
"
"1","       'Positive' Class :"
"1"," 1              "
"1","
"
"1","                         "
"1","                "
"1","
"
"1","
"
"0","#Now, for the RF with CV"
"0","ct = trainControl(method = ""repeatedcv"", number = 5, repeats = 2)"
"0","grid_rf = expand.grid(.mtry = c(p/3, 3, 3.5, sqrt(p)))"
"0",""
"0","cvrfcat = train(good~., data = train,"
"0","                     method = 'rf',"
"0","                     metric = ""Accuracy"","
"0","                     trControl = ct,"
"0","                     tuneGrid = grid_rf)"
"0",""
"0",""
"0","cvrfcat_pred = predict(cvrfcat, test.x)"
"0","confMat = confusionMatrix(cvrfcat_pred, test.y, positive = ""1"")"
"0","cvrfcat_eval = list(confusionMatrix = confMat); cvrfcat_eval"
"1","$confusionMatrix
"
"1","Confusion Matrix and Statistics

"
"1","          Reference
"
"1","Prediction"
"1","   0"
"1","   1"
"1","
         0"
"1","  77"
"1","  18"
"1","
         1"
"1","  31"
"1"," 235"
"1","
"
"1",""
"1","                         "
"1","                 "
"1","
"
"1","               Accuracy :"
"1"," 0.8643          "
"1","
"
"1","                 95% CI :"
"1"," (0.8246, 0.8979)"
"1","
"
"1","    No Information Rate :"
"1"," 0.7008          "
"1","
"
"1","    P-Value [Acc > NIR] :"
"1"," 2.497e-13       "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","                  Kappa :"
"1"," 0.6647          "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1"," Mcnemar's Test P-Value :"
"1"," 0.08648         "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","            Sensitivity :"
"1"," 0.9289          "
"1","
"
"1","            Specificity :"
"1"," 0.7130          "
"1","
"
"1","         Pos Pred Value :"
"1"," 0.8835          "
"1","
"
"1","         Neg Pred Value :"
"1"," 0.8105          "
"1","
"
"1","             Prevalence :"
"1"," 0.7008          "
"1","
"
"1","         Detection Rate :"
"1"," 0.6510          "
"1","
"
"1","   Detection Prevalence :"
"1"," 0.7368          "
"1","
"
"1","      Balanced Accuracy :"
"1"," 0.8209          "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","       'Positive' Class :"
"1"," 1               "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","
"
"0","importance(rfcat)"
"1","                    "
"1"," MeanDecreaseGini"
"1","
fixed.acidity       "
"1","         92.81336"
"1","
volatile.acidity    "
"1","        145.42586"
"1","
citric.acid         "
"1","        109.98682"
"1","
residual.sugar      "
"1","        117.51553"
"1","
chlorides           "
"1","        110.45898"
"1","
free.sulfur.dioxide "
"1","        138.38185"
"1","
total.sulfur.dioxide"
"1","        121.97806"
"1","
density             "
"1","        146.76925"
"1","
pH                  "
"1","        108.47790"
"1","
sulphates           "
"1","         91.50908"
"1","
alcohol             "
"1","        180.66876"
"1","
"
"0","#Tried to do reduced model, but as expected got a better result with full model"
"0","#(even though the most important variables were selected)"
"0","cvrfcat.reduced = caret::train(good~alcohol+density+residual.sugar+chlorides, data = train,"
"0","                     method = 'rf',"
"0","                     metric = ""Accuracy"","
"0","                     trControl = ct,"
"0","                     tuneGrid = grid_rf)"
"0",""
"0",""
"0","cvrfcat_pred.reduced = predict(cvrfcat.reduced, test.x)"
"0","confMat = confusionMatrix(cvrfcat_pred.reduced, test.y, positive = ""1"")"
"0","cvrfcat_eval.reduced = list(confusionMatrix = confMat); cvrfcat_eval.reduced"
"1","$confusionMatrix
"
"1","Confusion Matrix and Statistics

"
"1","          Reference
"
"1","Prediction"
"1","   0"
"1","   1"
"1","
         0"
"1","  68"
"1","  22"
"1","
         1"
"1","  40"
"1"," 231"
"1","
"
"1",""
"1","                         "
"1","                 "
"1","
"
"1","               Accuracy :"
"1"," 0.8283          "
"1","
"
"1","                 95% CI :"
"1"," (0.7853, 0.8657)"
"1","
"
"1","    No Information Rate :"
"1"," 0.7008          "
"1","
"
"1","    P-Value [Acc > NIR] :"
"1"," 1.892e-08       "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","                  Kappa :"
"1"," 0.5699          "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1"," Mcnemar's Test P-Value :"
"1"," 0.03085         "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","            Sensitivity :"
"1"," 0.9130          "
"1","
"
"1","            Specificity :"
"1"," 0.6296          "
"1","
"
"1","         Pos Pred Value :"
"1"," 0.8524          "
"1","
"
"1","         Neg Pred Value :"
"1"," 0.7556          "
"1","
"
"1","             Prevalence :"
"1"," 0.7008          "
"1","
"
"1","         Detection Rate :"
"1"," 0.6399          "
"1","
"
"1","   Detection Prevalence :"
"1"," 0.7507          "
"1","
"
"1","      Balanced Accuracy :"
"1"," 0.7713          "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","       'Positive' Class :"
"1"," 1               "
"1","
"
"1","                         "
"1","                 "
"1","
"
"1","
"
