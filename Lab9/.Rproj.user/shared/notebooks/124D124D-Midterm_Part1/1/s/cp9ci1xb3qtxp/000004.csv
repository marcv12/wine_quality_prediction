"0","thresh <- seq(0.1,1.0, length = 10)"
"0",""
"0","#cost vector"
"0","cost_tr = rep(0,length(thresh))"
"0",""
"0",""
"0","#for training set, let's see what treshold is the best to use to minimize costs"
"0","#for training set"
"0","for (i in 1:length(thresh)){"
"0","  "
"0","  glm = rep(""no"", length(myfit2.AIC$fitted.values))"
"0","  glm[myfit2.AIC$fitted.values > thresh[i]] = ""yes"""
"0","  glm <- as.factor(glm)"
"0","  x <- confusionMatrix(glm, train$Closed_Account, positive = ""yes"")"
"0","  TN <- x$table[1]"
"0","  FP <- x$table[2]"
"0","  FN <- x$table[3]"
"0","  TP <- x$table[4]"
"0","  cost_tr[i] = FN*50 + TP*(-20) + FP*(-20) + TN*(-50)"
"0","}"
"2","Warning in confusionMatrix.default(glm, train$Closed_Account, positive = ""yes"") :"
"2","
 "
"2"," Levels are not in the same order for reference and data. Refactoring data to match.
"
"0","x <- confusionMatrix(glm, train$Closed_Account, positive = ""yes"")"
"2","Warning in confusionMatrix.default(glm, train$Closed_Account, positive = ""yes"") :"
"2","
 "
"2"," Levels are not in the same order for reference and data. Refactoring data to match.
"
"0","TN <- x$table[1]"
"0","FP <- x$table[2]"
"0","FN <- x$table[3]"
"0","TP <- x$table[4]"
"0","cost_simple_tr = FN*50 + TP*(-20) + FP*(-20) + TN*(-50)"
"0",""
"0",""
"0",""
"0","# putting results in a dataframe for plotting"
"0","dat <- data.frame("
"0","  model = c(rep(""optimized"",10),""simple""),"
"0","  cost_per_customer = c(cost_tr,cost_simple_tr),"
"0","  threshold = c(thresh,0.5)"
"0",")"
"0",""
"0","# plotting"
"0","plot <- ggplot(dat, aes(x = threshold, y = cost_per_customer, group = model, colour = model)) +"
"0","  geom_line() +"
"0","  geom_point()"
"0",""
"0",""
"0",""
"0","# cost as a function of threshold"
"0","churn.probs.AIC <- predict(myfit2.AIC, validation, type = ""response"")"
"0","  "
"0","churn.probs.BIC <- predict(myfit3.BIC, validation, type = ""response"") "
"0",""
"0","cost = rep(0,length(thresh))"
"0","require(caret)"
"0",""
"0","for (i in 1:length(thresh)){"
"0","  "
"0","  glm.pred = rep(""no"", length(churn.probs.AIC))"
"0","  glm.pred[churn.probs.AIC > thresh[i]] = ""yes"""
"0","  glm.pred <- as.factor(glm.pred)"
"0","  x <- confusionMatrix(glm.pred, validation$Closed_Account, positive = ""yes"")"
"0","  TN <- x$table[1]"
"0","  FP <- x$table[2]"
"0","  FN <- x$table[3]"
"0","  TP <- x$table[4]"
"0","  cost[i] = FN*50 + TP*(-20) + FP*(-20) + TN*(-50)"
"0","}"
"2","Warning in confusionMatrix.default(glm.pred, validation$Closed_Account,  :"
"2","
 "
"2"," Levels are not in the same order for reference and data. Refactoring data to match.
"
"0","#for the simple model, take treshold as 0.5"
"0","glm.pred = rep(""no"", length(churn.probs.AIC))"
"0","glm.pred[churn.probs.AIC > 0.5] = ""yes"""
"0","glm.pred <- as.factor(glm.pred)"
"0",""
"0","x <- confusionMatrix(glm.pred, validation$Closed_Account, positive = ""yes"")"
"0","TN <- x$table[1]"
"0","FP <- x$table[2]"
"0","FN <- x$table[3]"
"0","TP <- x$table[4]"
"0","cost_simple = FN*50 + TP*(-20) + FP*(-20) + TN*(-50)"
"0",""
"0",""
"0",""
"0","# putting results in a dataframe for plotting"
"0","dat <- data.frame("
"0","  model = c(rep(""optimized"",10),""simple""),"
"0","  cost_per_customer = c(cost,cost_simple),"
"0","  threshold = c(thresh,0.5)"
"0",")"
"0",""
"0",""
"0",""
"0","# plotting"
"0","plot2 <- ggplot(dat, aes(x = threshold, y = cost_per_customer, group = model, colour = model)) +"
"0","  geom_line() +"
"0","  geom_point()"
"0",""
"0","par(mfrow=c(1,2))"
"0","grid.arrange(plot,plot2, ncol=2)"
